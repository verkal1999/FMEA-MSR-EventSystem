@startuml Flow_with_Trigger
title Reaction flow: TriggerD2 → KG check → SystemReaction plan → Execute

actor "OPC UA Server\n(PLC)" as PLC
participant "PLCMonitor" as Mon
participant "EventBus" as Bus
participant "ReactionManager" as RM
participant "PythonWorker\n(KG_Interface)" as KG
participant "CommandForceFactory" as CFF
participant "CommandForce" as CF
participant "AckLogger" as Ack

== Subscription ==
PLC -> Mon: subscribeBool(ns=4;s=TriggerD2)

== Event ==
PLC -> Mon: DataChange: TriggerD2 = true
Mon -> Bus: post(evD2)
Bus -> RM: onMethod(evD2)
activate RM

== Inventory snapshot & logging ==
RM -> Mon: dumpPlcInventory("PLC1")
Mon --> RM: rows (nodeIds, types)
loop for each row
  alt t == bool
    RM -> Mon: readBoolAt(ns,id)
    Mon --> RM: value
  else t == string
    RM -> Mon: readStringAt(ns,id)
    Mon --> RM: value
  else t == int16
    RM -> Mon: readInt16At(ns,id)
    Mon --> RM: value
  else t == float/double
    RM -> Mon: readFloatAt/readDoubleAt(ns,id)
    Mon --> RM: value
  end
end
RM -> RM: logInventoryVariables()

== KG-Abgleich (Worker-Thread) ==
RM -> KG: getFailureModeParameters(lastExecutedSkill)
KG --> RM: JSON rows (id, t, v)
RM -> RM: normalizeKgPotFM()\nnormalizeKgResponse()\ncompareAgainstCache()

alt >=1 passende potFM
  RM -> KG: getSystemreactionForFailureMode(foundFM)
  KG --> RM: sysReact IRI + params (JSON/Zeilen)
  RM -> RM: createPlanFromSystemReaction...\n(Plan mit Operations)
  loop for op in Plan
    alt op.type == CallMethod
      RM -> Mon: callJob(jobId, methodId,\ninputs[], outputs[])
      Mon --> RM: rc
    else op.type == PulseBool
      RM -> CFF: makePulseBool(nodeId, ns, value, timeout)
      CFF --> RM: CF
      RM -> CF: execute()
      activate CF
      CF -> Mon: PulseBool(nodeId, ns, value)
      Mon --> CF: OK
      CF --> RM: rc
      deactivate CF
    end
  end
else keine Übereinstimmung
  note right of RM
    Fallback-Plan:
    PulseBool OPCUA.DiagnoseFinished
  end note
  RM -> CFF: makePulseBool("OPCUA.DiagnoseFinished",4,true,100ms)
  CFF --> RM: CF
  RM -> CF: execute()
  activate CF
  CF -> Mon: PulseBool(DiagnoseFinished)
  Mon --> CF: OK
  CF --> RM: rc
  deactivate CF
end

== Acknowledge ==
RM -> Bus: post(evReactionPlanned)
Bus -> Ack: log PLANNED(corr, summary)
RM -> Bus: post(evReactionDone, rc)
Bus -> Ack: log DONE(corr, rc)

deactivate RM
@enduml
