@startuml Eventbased ExceptionHandling - Class Diagram (compact)
skinparam classAttributeIconSize 0
skinparam linetype ortho
top to bottom direction
hide empty members

' ======= Basistypen =======
enum EventType {
  evD2
  evReactionPlanned
  evReactionDone
  evProcessFail
  evGotFM
  evUnknownFM
  evIngestionPlanned
  evIngestionDone
}

class Event {
  +type: EventType
  +payload: any
  +ts: time_point
}

class Plan {
  +correlationId: string
  +resourceId: string
  +ops: vector<Operation>
}

enum OpType {
  CallMethod
  WriteBool
  PulseBool
  KGIngestion
}

class Operation {
  +type: OpType
  +callObjNodeId: string
  +callMethNodeId: string
  +inputs: UAValueMap
  +expOuts: UAValueMap
  +attach: shared_ptr<void>
}

class InventorySnapshot {
  +rows: vector<InventoryRow>
  +bools: map<string,bool>
  +strings: map<string,string>
  +int16s: map<string,int16_t>
}

class InventoryRow {
  +nodeClass: string
  +nodeId: string
  +dtypeOrSig: string
}

' ======= Beobachter & Bus =======
abstract class ReactiveObserver {
  +priority: int
  {abstract} +onEvent(ev: Event): void
}

class EventBus {
  +post(ev: Event): void
  +post_now(ev: Event): void
  +process(): void
  +subscribe<T>(obj, &T::onEvent): void
  +unsubscribe<T>(obj, &T::onEvent): void
}

EventBus "1" *-- "1..*" Event
EventBus "1" --> "1..*" ReactiveObserver : notify

' ======= PLC & Python =======
class PLCMonitor {
  +buildInventorySnapshotNow(): InventorySnapshot
  +writeBool(nodeId: string, v: bool): bool
  +callMethodTyped(obj: string, meth: string, in: UAValueMap, timeoutMs: int): UAValueMap
}

class PythonRuntime {
  +getFailureModeParameters(lastSkill: string): string
  +getMonitoringActionForFM(fm: string): string
  +getSystemReactionForFM(fm: string): string
  +ingestOccurredFailure(paramsJson: string): int
}

PLCMonitor --> EventBus : post(evD2)
PythonRuntime <-[#gray,dashed]- ReactionManager : uses
PythonRuntime <-[#gray,dashed]- KGIngestionForce : uses

' ======= Manager & Recorder =======
class ReactionManager {
  +priority: int = 4
  +onEvent(ev: Event): void
  -compareAgainstCache(inv: InventorySnapshot, expects: UAValueMap): vector<string>
  -buildFallbackPulsePlan(corr: string): Plan
}

class FailureRecorder {
  +onEvent(ev: Event): void
  -buildParams(corr: string): shared_ptr<void> ' KgIngestionParams
}

class AckLogger {
  +onEvent(ev: Event): void
}

ReactiveObserver <|-- ReactionManager
ReactiveObserver <|-- FailureRecorder
ReactiveObserver <|-- AckLogger

ReactionManager ..> EventBus : subscribe/post
ReactionManager ..> PLCMonitor : uses
FailureRecorder ..> EventBus : subscribe
AckLogger ..> EventBus : subscribe
ReactionManager *-- Plan

' ======= Forces & Factory =======
interface ICommandForce {
  +execute(plan: Plan): int
}

interface IWinnerFilter {
  +filter(winners: vector<string>, corr: string, process: string): vector<string>
}

class CommandForce implements ICommandForce {
  -mon_: PLCMonitor&
  +execute(plan: Plan): int
}

class MonitoringActionForce implements IWinnerFilter {
  +filter(...): vector<string>
  -buildCallMethodPlan(payloadJson: string): Plan
}

class SystemReactionForce implements IWinnerFilter {
  +filter(...): vector<string>
  -buildCallMethodPlan(payloadJson: string, appendPulse: bool): Plan
}

class KGIngestionForce implements ICommandForce {
  +execute(plan: Plan): int
}

class CommandForceFactory {
  +createForOp(op: Operation): ICommandForce
  +createWinnerFilter(fetcherCb, defaultTimeoutMs: int): IWinnerFilter
}

CommandForceFactory ..> CommandForce : «creates»
CommandForceFactory ..> MonitoringActionForce : «creates»
CommandForceFactory ..> SystemReactionForce : «creates»
CommandForceFactory ..> KGIngestionForce : «creates»

ReactionManager ..> CommandForceFactory
FailureRecorder ..> CommandForceFactory
CommandForce --> PLCMonitor : uses
MonitoringActionForce --> PLCMonitor : uses
SystemReactionForce --> PLCMonitor : uses

' ======= Flussrelevante Beziehungen =======
PLCMonitor --> InventorySnapshot : creates
EventBus --> ReactionManager : evD2
EventBus --> FailureRecorder : all/errs
EventBus --> AckLogger : acks

@enduml
